{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "5a2fefaf-c3c2-4d3b-bf73-cdfccc837323",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import praw\n",
    "import pandas as pd\n",
    "from praw.models import MoreComments\n",
    "import requests_cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "7e2eb757-00f0-4d3d-b96a-7aa14259b6db",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "requests_cache.install_cache('Project')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "0f1aa523-28e0-406d-adc2-02e8ac6db4ea",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import praw\n",
    "import pandas as pd\n",
    "import time\n",
    "\n",
    "\n",
    "def reddit_request_rel(keyword):\n",
    "        \n",
    "# Reddit API 인증 정보 설정\n",
    "    reddit = praw.Reddit(client_id=\"6_vFH6w-993-rirPb6reUw\",         # your client id\n",
    "                     client_secret=\"mMxCgouAzC9GOIjaWIDIsdA3L7NcGg\",    # your client secret\n",
    "                     user_agent=\"heewonahn\")   # your user agent\n",
    "        \n",
    "    # 검색 결과를 저장할 리스트 초기화\n",
    "    posts_dict = {\"Title\": [], \"Post Text\": [],\n",
    "                  \"ID\": [], \"Score\": [],\n",
    "                  \"Total Comments\": [], \"Post URL\": [],\n",
    "                  \"Comments\": []}\n",
    "\n",
    "    # 각 요청마다 가져올 결과의 수 설정\n",
    "    limit_per_request = 1000\n",
    "\n",
    "# 여러 번의 요청을 보내어 결과를 분할하여 가져오기\n",
    "    # Reddit API로 검색 요청 보내기\n",
    "    current_results = list(reddit.subreddit('all').search(keyword, limit=limit_per_request))\n",
    "\n",
    "    # 현재 요청 결과를 posts_dict에 추가\n",
    "    for post in current_results:\n",
    "        # Title of each post\n",
    "        posts_dict[\"Title\"].append(post.title)\n",
    "\n",
    "        # Text inside a post\n",
    "        posts_dict[\"Post Text\"].append(post.selftext)\n",
    "\n",
    "        # Unique ID of each post\n",
    "        posts_dict[\"ID\"].append(post.id)\n",
    "\n",
    "        # The score of a post\n",
    "        posts_dict[\"Score\"].append(post.score)\n",
    "\n",
    "        # Total number of comments inside the post\n",
    "        posts_dict[\"Total Comments\"].append(post.num_comments)\n",
    "\n",
    "        # URL of each post\n",
    "        posts_dict[\"Post URL\"].append(post.url)\n",
    "\n",
    "        # 코멘트 가져오기 (메인 코멘트만)\n",
    "        comments = []\n",
    "\n",
    "        for comment in post.comments:\n",
    "            if not isinstance(comment, praw.models.MoreComments):  # MoreComments 제외\n",
    "                comments.append(comment.body)\n",
    "        posts_dict[\"Comments\"].append(comments)\n",
    "\n",
    "        # 요청 간격 설정 \n",
    "\n",
    "    # Saving the data in a pandas dataframe\n",
    "    top_posts = pd.DataFrame(posts_dict)\n",
    "    # CSV 파일 경로 및 파일 이름 지정\n",
    "    csv_file_path = f\"{keyword}_relevance.csv\"\n",
    "\n",
    "    # 데이터 프레임을 CSV 파일로 저장\n",
    "    top_posts.to_csv(csv_file_path, index=False)  # index=False로 설정하여 인덱스를 CSV 파일에 포함하지 않습니다.\n",
    "\n",
    "def reddit_request_new(keyword):\n",
    "    \n",
    "    # Reddit API 인증 정보 설정\n",
    "    reddit = praw.Reddit(client_id=\"6_vFH6w-993-rirPb6reUw\",         # your client id\n",
    "                     client_secret=\"mMxCgouAzC9GOIjaWIDIsdA3L7NcGg\",    # your client secret\n",
    "                     user_agent=\"heewonahn\")   # your user agent\n",
    "\n",
    "    \n",
    "    # 검색 결과를 저장할 리스트 초기화\n",
    "    posts_dict = {\"Title\": [], \"Post Text\": [],\n",
    "                  \"ID\": [], \"Score\": [],\n",
    "                  \"Total Comments\": [], \"Post URL\": [],\n",
    "                  \"Comments\": []}\n",
    "\n",
    "    # 각 요청마다 가져올 결과의 수 설정\n",
    "    limit_per_request = 1000\n",
    "\n",
    "# 여러 번의 요청을 보내어 결과를 분할하여 가져오기\n",
    "\n",
    "    # Reddit API로 검색 요청 보내기 (최신 순으로 정렬)\n",
    "    current_results = list(reddit.subreddit('all').search(keyword, limit=limit_per_request, sort='new'))\n",
    "\n",
    "    # 현재 요청 결과를 posts_dict에 추가\n",
    "    for post in current_results:\n",
    "        # Title of each post\n",
    "        posts_dict[\"Title\"].append(post.title)\n",
    "\n",
    "        # Text inside a post\n",
    "        posts_dict[\"Post Text\"].append(post.selftext)\n",
    "\n",
    "        # Unique ID of each post\n",
    "        posts_dict[\"ID\"].append(post.id)\n",
    "\n",
    "        # The score of a post\n",
    "        posts_dict[\"Score\"].append(post.score)\n",
    "\n",
    "        # Total number of comments inside the post\n",
    "        posts_dict[\"Total Comments\"].append(post.num_comments)\n",
    "\n",
    "        # URL of each post\n",
    "        posts_dict[\"Post URL\"].append(post.url)\n",
    "\n",
    "        # 코멘트 가져오기 (메인 코멘트만)\n",
    "        comments = []\n",
    "        for comment in post.comments:\n",
    "            if not isinstance(comment, praw.models.MoreComments):  # MoreComments 제외\n",
    "                comments.append(comment.body)\n",
    "        posts_dict[\"Comments\"].append(comments)\n",
    "\n",
    "        # 요청 간격 설정 \n",
    "\n",
    "\n",
    "    # Saving the data in a pandas dataframe\n",
    "    top_posts = pd.DataFrame(posts_dict)\n",
    "\n",
    "    # CSV 파일로 저장\n",
    "    csv_file_path = f\"{keyword}_new.csv\"\n",
    "    top_posts.to_csv(csv_file_path, index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "a0b6428a-b550-4334-bd9c-c2ae4e48a03e",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "key=['gun regulation','abortion','gun control','self-harm','suicide']\n",
    "\n",
    "for keyword in key:\n",
    "    reddit_request_rel(keyword)\n",
    "    reddit_request_new(keyword)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b9b17895-405a-4bf3-9221-71f4a9f3bacc",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "abortion_new= pd.read_csv('abortion_new.csv')\n",
    "abortion_relevance= pd.read_csv('abortion_relevance.csv')\n",
    "\n",
    "gun_control_new= pd.read_csv('gun control_new.csv')\n",
    "gun_control_relevance= pd.read_csv('gun control_relevance.csv')\n",
    "gun_regulation_new= pd.read_csv('gun regulation_new.csv')\n",
    "gun_regulation_relevance= pd.read_csv('gun regulation_relevance.csv')\n",
    "\n",
    "self_harm_new=pd.read_csv('self-harm_new.csv')\n",
    "self_harm_relevance=pd.read_csv('self-harm_relevance.csv')\n",
    "suicide_new=pd.read_csv('suicide_new.csv')\n",
    "suicide_relevance=pd.read_csv('suicide_relevance.csv')\n",
    "\n",
    "suicide_harm_new=pd.concat([self_harm_new, suicide_new])\n",
    "suicide_harm_relevance=pd.concat([self_harm_relevance, suicide_relevance])\n",
    "\n",
    "gun_new=pd.concat([gun_control_new, gun_regulation_new])\n",
    "gun_relevance=pd.concat([gun_control_relevance, gun_regulation_relevance])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "89403e0f-fc48-462d-8442-be579fb538f7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data for abortion sorted new 249\n",
      "Number of data for abortion sorted relevance  232\n",
      "Number of data for gun control sorted new  441\n",
      "Number of data for gun control sorted relevance 435\n",
      "Number of data for suicide and self harm sorted new  494\n",
      "Number of data for suicide and self harm sorted relevance 452\n"
     ]
    }
   ],
   "source": [
    "print('Number of data for abortion sorted new', abortion_new.shape[0])\n",
    "print('Number of data for abortion sorted relevance ', abortion_relevance.shape[0])\n",
    "\n",
    "print('Number of data for gun control sorted new ', gun_new.shape[0])\n",
    "print('Number of data for gun control sorted relevance', gun_relevance.shape[0])\n",
    "\n",
    "print('Number of data for suicide and self harm sorted new ', suicide_harm_new.shape[0])\n",
    "print('Number of data for suicide and self harm sorted relevance', suicide_harm_relevance.shape[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "e18333f3-835d-45aa-87ef-3be07bc4696f",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of comments for abortion sorted new 1910\n",
      "Number of comments for abortion sorted relevance  27386\n",
      "Number of comments for gun control sorted new  3354\n",
      "Number of comments for gun control sorted relevance 23177\n",
      "Number of comments for suicide and self harm sorted new  1343\n",
      "Number of comments for suicide and self harm sorted relevance 40863\n"
     ]
    }
   ],
   "source": [
    "# deleting empty comments making a list containing all the comments for every data sets \n",
    "\n",
    "abortion_new_comment = [comment for comments in abortion_new['Comments'] if comments != '[]' for comment in eval(comments)]\n",
    "abortion_rel_comment = [comment for comments in abortion_relevance['Comments'] if comments != '[]' for comment in eval(comments)]\n",
    "gun_new_comment = [comment for comments in gun_new['Comments'] if comments != '[]' for comment in eval(comments)]\n",
    "gun_rel_comment = [comment for comments in gun_relevance['Comments'] if comments != '[]' for comment in eval(comments)]\n",
    "suicide_new_comment = [comment for comments in suicide_harm_new['Comments'] if comments != '[]' for comment in eval(comments)]\n",
    "suicide_rel_comment = [comment for comments in suicide_harm_relevance['Comments'] if comments != '[]' for comment in eval(comments)]\n",
    "\n",
    "\n",
    "print('Number of comments for abortion sorted new', len(abortion_new_comment))\n",
    "print('Number of comments for abortion sorted relevance ', len(abortion_rel_comment))\n",
    "\n",
    "print('Number of comments for gun control sorted new ', len(gun_new_comment))\n",
    "print('Number of comments for gun control sorted relevance', len(gun_rel_comment))\n",
    "\n",
    "print('Number of comments for suicide and self harm sorted new ', len(suicide_new_comment))\n",
    "print('Number of comments for suicide and self harm sorted relevance', len(suicide_rel_comment))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "5993d8d9-6745-4a3e-bb62-1936b4f2718b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "\n",
    "service = Service()\n",
    "options = webdriver.ChromeOptions()\n",
    "driver = webdriver.Chrome(service=service, options=options)\n",
    "url='https://www.yahoo.com/lifestyle/babysitter-wonders-she-wrong-call-190408055.html'\n",
    "driver.get(url)\n",
    "driver.find_element(By.CLASS_NAME, 'caas-button').click()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "1e8dc354-a6f9-4096-a233-c11b04b1ed28",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "NoSuchElementException",
     "evalue": "Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[@aria-label=\"Show more replies\"]\"}\n  (Session info: chrome=122.0.6261.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n0   chromedriver                        0x00000001045fc53c chromedriver + 3966268\n1   chromedriver                        0x00000001045f4ac8 chromedriver + 3934920\n2   chromedriver                        0x0000000104277da0 chromedriver + 277920\n3   chromedriver                        0x00000001042ba394 chromedriver + 549780\n4   chromedriver                        0x00000001042f2bf0 chromedriver + 781296\n5   chromedriver                        0x00000001042aefb0 chromedriver + 503728\n6   chromedriver                        0x00000001042afa28 chromedriver + 506408\n7   chromedriver                        0x00000001045c1724 chromedriver + 3725092\n8   chromedriver                        0x00000001045c5c18 chromedriver + 3742744\n9   chromedriver                        0x00000001045aa20c chromedriver + 3629580\n10  chromedriver                        0x00000001045c6714 chromedriver + 3745556\n11  chromedriver                        0x000000010459d584 chromedriver + 3577220\n12  chromedriver                        0x00000001045e4f74 chromedriver + 3870580\n13  chromedriver                        0x00000001045e5118 chromedriver + 3871000\n14  chromedriver                        0x00000001045f4738 chromedriver + 3934008\n15  libsystem_pthread.dylib             0x0000000182c72034 _pthread_start + 136\n16  libsystem_pthread.dylib             0x0000000182c6ce3c thread_start + 8\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNoSuchElementException\u001b[0m                    Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[228], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m button \u001b[38;5;241m=\u001b[39m driver\u001b[38;5;241m.\u001b[39mfind_element(By\u001b[38;5;241m.\u001b[39mXPATH, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m//button[@aria-label=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mShow more replies\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      2\u001b[0m button\u001b[38;5;241m.\u001b[39mclick()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:741\u001b[0m, in \u001b[0;36mWebDriver.find_element\u001b[0;34m(self, by, value)\u001b[0m\n\u001b[1;32m    738\u001b[0m     by \u001b[38;5;241m=\u001b[39m By\u001b[38;5;241m.\u001b[39mCSS_SELECTOR\n\u001b[1;32m    739\u001b[0m     value \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m[name=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mvalue\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m--> 741\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexecute(Command\u001b[38;5;241m.\u001b[39mFIND_ELEMENT, {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124musing\u001b[39m\u001b[38;5;124m\"\u001b[39m: by, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m: value})[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347\u001b[0m, in \u001b[0;36mWebDriver.execute\u001b[0;34m(self, driver_command, params)\u001b[0m\n\u001b[1;32m    345\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommand_executor\u001b[38;5;241m.\u001b[39mexecute(driver_command, params)\n\u001b[1;32m    346\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m response:\n\u001b[0;32m--> 347\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39merror_handler\u001b[38;5;241m.\u001b[39mcheck_response(response)\n\u001b[1;32m    348\u001b[0m     response[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_unwrap_value(response\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalue\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    349\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m response\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229\u001b[0m, in \u001b[0;36mErrorHandler.check_response\u001b[0;34m(self, response)\u001b[0m\n\u001b[1;32m    227\u001b[0m         alert_text \u001b[38;5;241m=\u001b[39m value[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124malert\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    228\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace, alert_text)  \u001b[38;5;66;03m# type: ignore[call-arg]  # mypy is not smart enough here\u001b[39;00m\n\u001b[0;32m--> 229\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exception_class(message, screen, stacktrace)\n",
      "\u001b[0;31mNoSuchElementException\u001b[0m: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//button[@aria-label=\"Show more replies\"]\"}\n  (Session info: chrome=122.0.6261.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n0   chromedriver                        0x00000001045fc53c chromedriver + 3966268\n1   chromedriver                        0x00000001045f4ac8 chromedriver + 3934920\n2   chromedriver                        0x0000000104277da0 chromedriver + 277920\n3   chromedriver                        0x00000001042ba394 chromedriver + 549780\n4   chromedriver                        0x00000001042f2bf0 chromedriver + 781296\n5   chromedriver                        0x00000001042aefb0 chromedriver + 503728\n6   chromedriver                        0x00000001042afa28 chromedriver + 506408\n7   chromedriver                        0x00000001045c1724 chromedriver + 3725092\n8   chromedriver                        0x00000001045c5c18 chromedriver + 3742744\n9   chromedriver                        0x00000001045aa20c chromedriver + 3629580\n10  chromedriver                        0x00000001045c6714 chromedriver + 3745556\n11  chromedriver                        0x000000010459d584 chromedriver + 3577220\n12  chromedriver                        0x00000001045e4f74 chromedriver + 3870580\n13  chromedriver                        0x00000001045e5118 chromedriver + 3871000\n14  chromedriver                        0x00000001045f4738 chromedriver + 3934008\n15  libsystem_pthread.dylib             0x0000000182c72034 _pthread_start + 136\n16  libsystem_pthread.dylib             0x0000000182c6ce3c thread_start + 8\n"
     ]
    }
   ],
   "source": [
    "button = driver.find_element(By.XPATH, '//button[@aria-label=\"Show more replies\"]')\n",
    "button.click()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "43d3c5f2-f736-485d-a7e7-c1f07744a1b9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# 웹 페이지의 URL\n",
    "url = 'https://www.yahoo.com/lifestyle/babysitter-wonders-she-wrong-call-190408055.html'\n",
    "\n",
    "# requests를 사용하여 HTML 가져오기\n",
    "response = requests.get(url)\n",
    "html_content = response.text\n",
    "\n",
    "# BeautifulSoup을 사용하여 HTML 파싱\n",
    "soup = BeautifulSoup(html_content, \"html.parser\")\n",
    "\n",
    "# \"more comments\" 또는 \"more replies\" 버튼을 찾기 위한 조건에 맞는 요소 선택\n",
    "more_replies_button = soup.find(\"button\", {\"aria-label\": \"Show more replies\"})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "056c5352-5b5e-468d-83aa-57716e3de140",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "def get_article_comments(url):\n",
    "    comments = []\n",
    "\n",
    "    # Get HTML content of the article page\n",
    "    response = requests.get(url)\n",
    "    if response.status_code == 200:\n",
    "        soup = BeautifulSoup(response.content, 'html.parser')\n",
    "        \n",
    "        # Find the comment section iframe\n",
    "        iframe = soup.find('iframe', id=lambda x: x and x.startswith(\"jacSandbox_\"))\n",
    "        if iframe:\n",
    "            iframe_url = iframe['src']\n",
    "            \n",
    "            # Load the iframe URL to get the comment section\n",
    "            iframe_response = requests.get(iframe_url)\n",
    "            if iframe_response.status_code == 200:\n",
    "                iframe_soup = BeautifulSoup(iframe_response.content, 'html.parser')\n",
    "                \n",
    "                # Find the comment elements\n",
    "                comment_elements = iframe_soup.select('.spcv_messageText')\n",
    "                for comment_element in comment_elements:\n",
    "                    comment = comment_element.get_text(strip=True)\n",
    "                    comments.append(comment)\n",
    "    \n",
    "    return comments\n",
    "\n",
    "# URL of the article\n",
    "url = \"https://www.yahoo.com/lifestyle/babysitter-wonders-she-wrong-call-190408055.html\"\n",
    "\n",
    "# Get comments from the article URL\n",
    "article_comments = get_article_comments(url)\n",
    "\n",
    "# Print the comments\n",
    "for i, comment in enumerate(article_comments, start=1):\n",
    "    print(f\"Comment {i}: {comment}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "862a98a6-9d05-4145-bfa7-ce74db197198",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "def get_comments(url):\n",
    "    comments = []\n",
    "\n",
    "    # HTTP GET 요청을 보내어 웹 페이지의 HTML을 가져옴\n",
    "    response = requests.get(url)\n",
    "\n",
    "    # 응답 코드가 200인지 확인하여 유효한 응답인지 확인\n",
    "    if response.status_code == 200:\n",
    "        # BeautifulSoup을 사용하여 HTML을 파싱\n",
    "        soup = BeautifulSoup(response.text, 'html.parser')\n",
    "        \n",
    "        # 코멘트가 포함된 요소들을 찾음\n",
    "        comment_elements = soup.find_all(class_='comment')\n",
    "\n",
    "        # 각 코멘트의 텍스트를 추출하여 리스트에 추가\n",
    "        for comment_element in comment_elements:\n",
    "            comment_text = comment_element.get_text(strip=True)\n",
    "            comments.append(comment_text)\n",
    "\n",
    "    return comments\n",
    "\n",
    "# 웹 페이지의 URL\n",
    "url = \"https://www.yahoo.com/lifestyle/babysitter-wonders-she-wrong-call-190408055.html\"\n",
    "\n",
    "# 코멘트 가져오기\n",
    "comments = get_comments(url)\n",
    "\n",
    "# 가져온 코멘트 출력\n",
    "for i, comment in enumerate(comments, start=1):\n",
    "    print(f\"Comment {i}: {comment}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9869a102-a16b-4ff5-b4ad-aa32b53301cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07de5702-bd2d-42e3-b6bc-e3af203ffb93",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f6ddd51-cf12-40a3-93dd-66f8a2fd28ec",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "255e3e7f-e6ab-498e-84a4-55b799a760cc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5be5bbe0-b02e-4c3a-be07-66f0a3520a7a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36891876-84bf-490d-ab4f-8bc236c9e0de",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
